/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { BucketsController, ListAllMyBucketsResult } from '../src';
import { testClient } from './testClient.js';
import { expectHeadersToMatch, makeApiCall } from './testHelper.js';

describe('BucketsController', () => {
  let controller : BucketsController;

  beforeAll(() => {
    controller = new BucketsController(testClient);
  });

  it('should List', async () => {
    const response = await makeApiCall(() => controller.list());

    expect(response.statusCode).toBe(200);

    const expectedHeaders = {
      'Content-Type': ['application/xml', false],
      'x-amz-id-2': [
        '28T2uPTa30IzOdvmGBP4sdmhoFBusPVhwKGsH3FeD6Jmhf8ndSUSqK2pIbTy6zRLPwh5JL/m4OY=',
        false,
      ],
      'x-amz-request-id': ['38E58E3CA71E5E4F', false],
      Date: ['Sun, 17 Nov 2019 06:17:36 GMT', false],
      'Transfer-Encoding': ['chunked', false],
      Connection: ['close', false],
      Server: ['AmazonS3', false],
    };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ListAllMyBucketsResult = {
      owner: {
        iD: '94aebaef4c4fbbe84a36f076a1adbf6208742d219ac1cecb29939e262efabf56',
        displayName: 'kinlane',
      },
      buckets: {
        bucket: {
          name: 'working-demo-2',
          creationDate: '2019-11-17T04:45:13Z',
        },
      },
    };

    expect(response.result).not.toBeNull();
    expect(response.result).toEqual(expected);
  });

  it('should Delete', async () => {
    const bucket = 'my-bucket-storage-2';

    const response = await makeApiCall(() => controller.mDelete(bucket));

    expect(response.statusCode).toBe(200);
  });
});
