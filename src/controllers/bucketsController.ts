/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  ListAllMyBucketsResult,
  listAllMyBucketsResultSchema,
} from '../models/listAllMyBucketsResult.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';

export class BucketsController extends BaseController {
  /**
   * @param bucket
   * @return Response from the API call
   */
  async head(
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ bucket: [bucket, string()] });
    req.appendTemplatePath`/${mapped.bucket}/`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Returns a list of all buckets owned by the authenticated sender of the request.
   *
   * @return Response from the API call
   */
  async list(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListAllMyBucketsResult>> {
    const req = this.createRequest('GET', '/');
    return req.callAsXml(
      'ListAllMyBucketsResult',
      listAllMyBucketsResultSchema,
      requestOptions
    );
  }

  /**
   * Creates a new bucket. To create a bucket, you must register with Amazon S3 and have a valid AWS
   * Access Key ID to authenticate requests. Anonymous requests are never allowed to create buckets. By
   * creating the bucket, you become the bucket owner.
   *
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async create(
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}/`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Deletes the bucket. All objects (including all object versions and Delete Markers) in the bucket
   * must be deleted before the bucket itself can be deleted.
   *
   * @param bucket
   * @return Response from the API call
   */
  async mDelete(
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ bucket: [bucket, string()] });
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }
}
