/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string } from '../schema.js';
import { BaseController } from './baseController.js';

export class MetricsController extends BaseController {
  /**
   * Gets a metrics configuration (specified by the metrics configuration ID) from the bucket. Note that
   * this doesn't include the daily storage metrics.
   *
   * @param metrics
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketMetricsConfiguration(
    metrics: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      metrics: [metrics, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('metrics', mapped.metrics);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsText(requestOptions);
  }

  /**
   * Sets a metrics configuration (specified by the metrics configuration ID) for the bucket. You can
   * have up to 1,000 metrics configurations per bucket. If you're updating an existing metrics
   * configuration, note that this is a full replacement of the existing metrics configuration. If you
   * don't include the elements you want to keep, they are erased.
   *
   * @param metrics
   * @param id
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketMetricsConfiguration1(
    metrics: string,
    id: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      metrics: [metrics, string()],
      id: [id, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.query('metrics', mapped.metrics);
    req.query('Id', mapped.id);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }

  /**
   * Lists the metrics configurations for the bucket. The metrics configurations are only for the request
   * metrics of the bucket and do not provide information on daily storage metrics. You can have up to 1,
   * 000 configurations per bucket.
   *
   * @param metrics
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async listBucketMetricsConfigurations(
    metrics: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      metrics: [metrics, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('metrics', mapped.metrics);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsText(requestOptions);
  }

  /**
   * Deletes a metrics configuration for the Amazon CloudWatch request metrics (specified by the metrics
   * configuration ID) from the bucket. Note that this doesn't include the daily storage metrics.
   *
   * @param metrics
   * @param id
   * @param bucket
   * @return Response from the API call
   */
  async deleteBucketMetricsConfiguration(
    metrics: string,
    id: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      metrics: [metrics, string()],
      id: [id, string()],
      bucket: [bucket, string()],
    });
    req.query('metrics', mapped.metrics);
    req.query('Id', mapped.id);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }
}
