/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string } from '../schema.js';
import { BaseController } from './baseController.js';

export class LegalHoldController extends BaseController {
  /**
   * Gets an object's current Legal Hold status. For more information, see Locking Objects.
   *
   * @param legalHold
   * @param xAmzContentSha256
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async legalHold(
    legalHold: string,
    xAmzContentSha256: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      legalHold: [legalHold, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('legal-hold', mapped.legalHold);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.call(requestOptions);
  }

  /**
   * Gets an object's current Legal Hold status. For more information, see Locking Objects.
   *
   * @param legalHold
   * @param contentMD5
   * @param body
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async legalHold1(
    legalHold: string,
    contentMD5: string,
    body: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      legalHold: [legalHold, string()],
      contentMD5: [contentMD5, string()],
      body: [body, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.header('Content-MD5', mapped.contentMD5);
    req.query('legal-hold', mapped.legalHold);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.call(requestOptions);
  }
}
