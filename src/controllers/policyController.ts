/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { BucketPolicy, bucketPolicySchema } from '../models/bucketPolicy.js';
import {
  BucketPolicyRequest,
  bucketPolicyRequestSchema,
} from '../models/bucketPolicyRequest.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';

export class PolicyController extends BaseController {
  /**
   * Returns the policy of a specified bucket. If you are using an identity other than the root user of
   * the AWS account that owns the bucket, the calling identity must have the GetBucketPolicy permissions
   * on the specified bucket and belong to the bucket owner's account in order to use this operation.
   *
   * @param policy
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketPolicy(
    policy: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<BucketPolicy>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      policy: [policy, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('policy', mapped.policy);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(bucketPolicySchema, requestOptions);
  }

  /**
   * Applies an Amazon S3 bucket policy to an Amazon S3 bucket. If you are using an identity other than
   * the root user of the AWS account that owns the bucket, the calling identity must have the
   * PutBucketPolicy permissions on the specified bucket and belong to the bucket owner's account in
   * order to use this operation.
   *
   * @param policy
   * @param contentMD5
   * @param xAmzConfirmRemoveSelfBucketAccess
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketPolicy1(
    policy: string,
    contentMD5: string,
    xAmzConfirmRemoveSelfBucketAccess: string,
    body: BucketPolicyRequest,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      policy: [policy, string()],
      contentMD5: [contentMD5, string()],
      xAmzConfirmRemoveSelfBucketAccess: [
        xAmzConfirmRemoveSelfBucketAccess,
        string(),
      ],
      body: [body, bucketPolicyRequestSchema],
      bucket: [bucket, string()],
    });
    req.header('Content-MD5', mapped.contentMD5);
    req.header(
      'x-amz-confirm-remove-self-bucket-access',
      mapped.xAmzConfirmRemoveSelfBucketAccess
    );
    req.query('policy', mapped.policy);
    req.json(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Retrieves the policy status for an Amazon S3 bucket, indicating whether the bucket is public. In
   * order to use this operation, you must have the s3:GetBucketPolicyStatus permission. For more
   * information about Amazon S3 permissions, see Specifying Permissions in a Policy.
   *
   * @param policyStatus
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketPolicyStatus(
    policyStatus: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      policyStatus: [policyStatus, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('policyStatus', mapped.policyStatus);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsText(requestOptions);
  }

  /**
   * This implementation of the DELETE operation uses the policysubresource to delete the policy of a
   * specified bucket. If you are using an identity other than the root user of the AWS account that owns
   * the bucket, the calling identity must have the DeleteBucketPolicy permissions on the specified
   * bucket and belong to the bucket owner's account in order to use this operation.
   *
   * @param policy
   * @param bucket
   * @return Response from the API call
   */
  async deleteBucketPolicy(
    policy: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      policy: [policy, string()],
      bucket: [bucket, string()],
    });
    req.query('policy', mapped.policy);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
