/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';

export class EncryptionController extends BaseController {
  /**
   * Returns the default encryption configuration for an Amazon S3 bucket. For information about the
   * Amazon S3 default encryption feature, see Amazon S3 Default Bucket Encryption.
   *
   * @param encryption
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketEncryption(
    encryption: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      encryption: [encryption, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('encryption', mapped.encryption);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsText(requestOptions);
  }

  /**
   * This implementation of the PUT operation uses the encryption subresource to set the default
   * encryption state of an existing bucket.
   *
   * @param encryption
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketEncryption1(
    encryption: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      encryption: [encryption, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.query('encryption', mapped.encryption);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This implementation of the DELETE operation removes default encryption from the bucket.
   *
   * @param encryption
   * @param bucket
   * @return Response from the API call
   */
  async deleteBucketEncryption(
    encryption: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      encryption: [encryption, string()],
      bucket: [bucket, string()],
    });
    req.query('encryption', mapped.encryption);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
