/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  ListVersionsResult,
  listVersionsResultSchema,
} from '../models/listVersionsResult.js';
import { string } from '../schema.js';
import { BaseController } from './baseController.js';

export class VersionsController extends BaseController {
  /**
   * Returns metadata about all of the versions of objects in a bucket. You can also use request
   * parameters as selection criteria to return metadata about a subset of all the object versions.
   *
   * @param versions
   * @param delimiter
   * @param encodingType
   * @param keyMarker
   * @param maxKeys
   * @param prefix
   * @param versionIdMarker
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async objectVersions(
    versions: string,
    delimiter: string,
    encodingType: string,
    keyMarker: string,
    maxKeys: string,
    prefix: string,
    versionIdMarker: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListVersionsResult>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      versions: [versions, string()],
      delimiter: [delimiter, string()],
      encodingType: [encodingType, string()],
      keyMarker: [keyMarker, string()],
      maxKeys: [maxKeys, string()],
      prefix: [prefix, string()],
      versionIdMarker: [versionIdMarker, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('versions', mapped.versions);
    req.query('Delimiter', mapped.delimiter);
    req.query('EncodingType', mapped.encodingType);
    req.query('KeyMarker', mapped.keyMarker);
    req.query('MaxKeys', mapped.maxKeys);
    req.query('Prefix', mapped.prefix);
    req.query('VersionIdMarker', mapped.versionIdMarker);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsXml(
      'ListVersionsResult',
      listVersionsResultSchema,
      requestOptions
    );
  }
}
