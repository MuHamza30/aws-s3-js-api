/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string } from '../schema.js';
import { BaseController } from './baseController.js';

export class InventoryController extends BaseController {
  /**
   * Returns an inventory configuration (identified by the inventory configuration ID) from the bucket.
   *
   * @param inventory
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketInventoryConfiguration(
    inventory: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      inventory: [inventory, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('inventory', mapped.inventory);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsText(requestOptions);
  }

  /**
   * Deletes an inventory configuration (identified by the inventory ID) from the bucket.
   *
   * @param inventory
   * @param id
   * @param bucket
   * @return Response from the API call
   */
  async deleteBucketInventoryConfiguration(
    inventory: string,
    id: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      inventory: [inventory, string()],
      id: [id, string()],
      bucket: [bucket, string()],
    });
    req.query('inventory', mapped.inventory);
    req.query('Id', mapped.id);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }

  /**
   * This implementation of the PUT operation adds an inventory configuration (identified by the
   * inventory ID) to the bucket. You can have up to 1,000 inventory configurations per bucket.
   *
   * @param inventory
   * @param id
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketInventoryConfiguration1(
    inventory: string,
    id: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      inventory: [inventory, string()],
      id: [id, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.query('inventory', mapped.inventory);
    req.query('Id', mapped.id);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }
}
