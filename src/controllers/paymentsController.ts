/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';

export class PaymentsController extends BaseController {
  /**
   * Returns the request payment configuration of a bucket. To use this version of the operation, you
   * must be the bucket owner. For more information, see Requester Pays Buckets.
   *
   * @param requestPayment
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketRequestPayment(
    requestPayment: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      requestPayment: [requestPayment, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('requestPayment', mapped.requestPayment);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsText(requestOptions);
  }

  /**
   * Sets the request payment configuration for a bucket. By default, the bucket owner pays for downloads
   * from the bucket. This configuration parameter enables the bucket owner (only) to specify that the
   * person requesting the download will be charged for the download.
   *
   * @param requestPayment
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketRequestPayment1(
    requestPayment: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      requestPayment: [requestPayment, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.query('requestPayment', mapped.requestPayment);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
