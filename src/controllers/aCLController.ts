/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  AccessControlPolicy,
  accessControlPolicySchema,
} from '../models/accessControlPolicy.js';
import {
  AccessControlPolicy1,
  accessControlPolicy1Schema,
} from '../models/accessControlPolicy1.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';

export class ACLController extends BaseController {
  /**
   * This implementation of the GET operation uses the acl subresource to return the access control list
   * (ACL) of a bucket. To use GET to return the ACL of the bucket, you must have READ_ACP access to the
   * bucket. If READ_ACP permission is granted to the anonymous user, you can return the ACL of the
   * bucket without using an authorization header.
   *
   * @param acl
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketACL(
    acl: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccessControlPolicy>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      acl: [acl, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('acl', mapped.acl);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsXml(
      'AccessControlPolicy',
      accessControlPolicySchema,
      requestOptions
    );
  }

  /**
   * Sets the permissions on an existing bucket using access control lists (ACL). For more information,
   * see Using ACLs. To set the ACL of a bucket, you must have WRITE_ACP permission.
   *
   * @param acl
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketACL1(
    acl: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      acl: [acl, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.query('acl', mapped.acl);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Returns the access control list (ACL) of an object. To use this operation, you must have READ_ACP
   * access to the object.
   *
   * @param acl
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async aCL(
    acl: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccessControlPolicy1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      acl: [acl, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.query('acl', mapped.acl);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.callAsXml(
      'AccessControlPolicy',
      accessControlPolicy1Schema,
      requestOptions
    );
  }

  /**
   * Returns the access control list (ACL) of an object. To use this operation, you must have READ_ACP
   * access to the object.
   *
   * @param acl
   * @param body
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async aCL1(
    acl: string,
    body: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      acl: [acl, string()],
      body: [body, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.query('acl', mapped.acl);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
