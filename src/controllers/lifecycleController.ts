/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';

export class LifecycleController extends BaseController {
  /**
   * Returns the lifecycle configuration information set on the bucket. For information about lifecycle
   * configuration, see Object Lifecycle Management.
   *
   * @param lifecycle
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketLifecycle(
    lifecycle: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      lifecycle: [lifecycle, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('lifecycle', mapped.lifecycle);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsText(requestOptions);
  }

  /**
   * Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the lifecycle
   * configuration rules in the lifecycle subresource associated with the bucket. Your objects never
   * expire, and Amazon S3 no longer automatically deletes any objects on the basis of rules contained in
   * the deleted lifecycle configuration.
   *
   * @param lifecycle
   * @param bucket
   * @return Response from the API call
   */
  async deleteBucketLifecycle(
    lifecycle: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      lifecycle: [lifecycle, string()],
      bucket: [bucket, string()],
    });
    req.query('lifecycle', mapped.lifecycle);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle configuration.
   *
   * @param lifecycle
   * @param contentMD5
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketLifecycle1(
    lifecycle: string,
    contentMD5: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      lifecycle: [lifecycle, string()],
      contentMD5: [contentMD5, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.header('Content-MD5', mapped.contentMD5);
    req.query('lifecycle', mapped.lifecycle);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
