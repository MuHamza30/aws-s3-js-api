/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core.js';
import {
  ListMultipartUploadsResult,
  listMultipartUploadsResultSchema,
} from '../models/listMultipartUploadsResult.js';
import { string } from '../schema.js';
import { BaseController } from './baseController.js';

export class UploadsController extends BaseController {
  /**
   * This operation initiates a multipart upload and returns an upload ID. This upload ID is used to
   * associate all of the parts in the specific multipart upload. You specify this upload ID in each of
   * your subsequent upload part requests (see UploadPart). You also include this upload ID in the final
   * request to either complete or abort the multipart upload request.
   *
   * @param uploads
   * @param xAmzContentSha256
   * @param file
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async createMultipart(
    uploads: string,
    xAmzContentSha256: string,
    file: FileWrapper,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      uploads: [uploads, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.header('Content-Type', 'application/x-www-form-urlencoded');
    req.query('uploads', mapped.uploads);
    req.formData({ File: file });
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.call(requestOptions);
  }

  /**
   * This operation lists in-progress multipart uploads. An in-progress multipart upload is a multipart
   * upload that has been initiated using the Initiate Multipart Upload request, but has not yet been
   * completed or aborted.
   *
   * @param uploads
   * @param delimiter
   * @param encodingType
   * @param keyMarker
   * @param maxUploads
   * @param prefix
   * @param uploadIdMarker
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async multipart(
    uploads: string,
    delimiter: string,
    encodingType: string,
    keyMarker: string,
    maxUploads: string,
    prefix: string,
    uploadIdMarker: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListMultipartUploadsResult>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      uploads: [uploads, string()],
      delimiter: [delimiter, string()],
      encodingType: [encodingType, string()],
      keyMarker: [keyMarker, string()],
      maxUploads: [maxUploads, string()],
      prefix: [prefix, string()],
      uploadIdMarker: [uploadIdMarker, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('uploads', mapped.uploads);
    req.query('Delimiter', mapped.delimiter);
    req.query('EncodingType', mapped.encodingType);
    req.query('KeyMarker', mapped.keyMarker);
    req.query('MaxUploads', mapped.maxUploads);
    req.query('Prefix', mapped.prefix);
    req.query('UploadIdMarker', mapped.uploadIdMarker);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsXml(
      'ListMultipartUploadsResult',
      listMultipartUploadsResultSchema,
      requestOptions
    );
  }

  /**
   * Completes a multipart upload by assembling previously uploaded parts.
   *
   * @param uploadId
   * @param xAmzContentSha256
   * @param body
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async completeMultipart(
    uploadId: string,
    xAmzContentSha256: string,
    body: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      uploadId: [uploadId, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      body: [body, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('UploadId', mapped.uploadId);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.call(requestOptions);
  }

  /**
   * Completes a multipart upload by assembling previously uploaded parts.
   *
   * @param uploadId
   * @param xAmzContentSha256
   * @param body
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async part(
    uploadId: string,
    xAmzContentSha256: string,
    body: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      uploadId: [uploadId, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      body: [body, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('UploadId', mapped.uploadId);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.call(requestOptions);
  }

  /**
   * Completes a multipart upload by assembling previously uploaded parts.
   *
   * @param uploadId
   * @param partNumber
   * @param xAmzContentSha256
   * @param body
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async partCopy(
    uploadId: string,
    partNumber: string,
    xAmzContentSha256: string,
    body: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      uploadId: [uploadId, string()],
      partNumber: [partNumber, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      body: [body, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('UploadId', mapped.uploadId);
    req.query('PartNumber', mapped.partNumber);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.call(requestOptions);
  }

  /**
   * Completes a multipart upload by assembling previously uploaded parts.
   *
   * @param uploadId
   * @param xAmzContentSha256
   * @param body
   * @param bucket
   * @param key
   * @return Response from the API call
   */
  async abortMultipart(
    uploadId: string,
    xAmzContentSha256: string,
    body: string,
    bucket: string,
    key: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      uploadId: [uploadId, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      body: [body, string()],
      bucket: [bucket, string()],
      key: [key, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('UploadId', mapped.uploadId);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}/${mapped.key}`;
    return req.call(requestOptions);
  }
}
