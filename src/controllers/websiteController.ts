/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';

export class WebsiteController extends BaseController {
  /**
   * Returns the website configuration for a bucket. To host website on Amazon S3, you can configure a
   * bucket as website by adding a website configuration. For more information about hosting websites,
   * see Hosting Websites on Amazon S3.
   *
   * @param website
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async website(
    website: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      website: [website, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('website', mapped.website);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }

  /**
   * Sets the configuration of the website that is specified in the website subresource. To configure a
   * bucket as a website, you can add this subresource on the bucket with website configuration
   * information such as the file name of the index document and any redirect rules.
   *
   * @param website
   * @param contentMD5
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async website1(
    website: string,
    contentMD5: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      website: [website, string()],
      contentMD5: [contentMD5, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.header('Content-MD5', mapped.contentMD5);
    req.query('website', mapped.website);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This operation removes the website configuration for a bucket. Amazon S3 returns a 200 OK response
   * upon successfully deleting a website configuration on the specified bucket. You will get a 200 OK
   * response if the website configuration you are trying to delete does not exist on the bucket. Amazon
   * S3 returns a 404 response if the bucket specified in the request does not exist.
   *
   * @param website
   * @param bucket
   * @return Response from the API call
   */
  async website2(
    website: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      website: [website, string()],
      bucket: [bucket, string()],
    });
    req.query('website', mapped.website);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
