/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string } from '../schema.js';
import { BaseController } from './baseController.js';

export class PublicAccessBlockController extends BaseController {
  /**
   * Retrieves the PublicAccessBlock configuration for an Amazon S3 bucket. In order to use this
   * operation, you must have the s3:GetBucketPublicAccessBlock permission. For more information about
   * Amazon S3 permissions, see Specifying Permissions in a Policy.
   *
   * @param publicAccessBlock
   * @param xAmzContentSha256
   * @return Response from the API call
   */
  async publicAccessBlock(
    publicAccessBlock: string,
    xAmzContentSha256: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/');
    const mapped = req.prepareArgs({
      publicAccessBlock: [publicAccessBlock, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('publicAccessBlock', mapped.publicAccessBlock);
    return req.call(requestOptions);
  }

  /**
   * Retrieves the PublicAccessBlock configuration for an Amazon S3 bucket. In order to use this
   * operation, you must have the s3:GetBucketPublicAccessBlock permission. For more information about
   * Amazon S3 permissions, see Specifying Permissions in a Policy.
   *
   * @param publicAccessBlock
   * @param xAmzContentSha256
   * @return Response from the API call
   */
  async publicAccessBlock1(
    publicAccessBlock: string,
    xAmzContentSha256: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT', '/');
    const mapped = req.prepareArgs({
      publicAccessBlock: [publicAccessBlock, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('publicAccessBlock', mapped.publicAccessBlock);
    return req.call(requestOptions);
  }

  /**
   * Removes the PublicAccessBlock configuration for an Amazon S3 bucket. In order to use this operation,
   * you must have the s3:PutBucketPublicAccessBlock permission.
   *
   * @param publicAccessBlock
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async publicAccessBlock2(
    publicAccessBlock: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      publicAccessBlock: [publicAccessBlock, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('publicAccessBlock', mapped.publicAccessBlock);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }
}
