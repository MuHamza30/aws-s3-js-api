/**
 * AWS S3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { string, unknown } from '../schema.js';
import { BaseController } from './baseController.js';
import { CustomError } from '../errors/customError.js';

export class ReplicationController extends BaseController {
  /**
   * Returns the replication configuration of a bucket.
   *
   * @param replication
   * @param xAmzContentSha256
   * @param bucket
   * @return Response from the API call
   */
  async bucketReplication(
    replication: string,
    xAmzContentSha256: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      replication: [replication, string()],
      xAmzContentSha256: [xAmzContentSha256, string()],
      bucket: [bucket, string()],
    });
    req.header('x-amz-content-sha256', mapped.xAmzContentSha256);
    req.query('replication', mapped.replication);
    req.appendTemplatePath`/${mapped.bucket}`;
    req.throwOn(404, CustomError, 'Not Found');
    return req.call(requestOptions);
  }

  /**
   * Creates a replication configuration or replaces an existing one.
   *
   * @param replication
   * @param contentMD5
   * @param xAmzBucketObjectLockToken
   * @param body
   * @param bucket
   * @return Response from the API call
   */
  async bucketReplication1(
    replication: string,
    contentMD5: string,
    xAmzBucketObjectLockToken: string,
    body: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      replication: [replication, string()],
      contentMD5: [contentMD5, string()],
      xAmzBucketObjectLockToken: [xAmzBucketObjectLockToken, string()],
      body: [body, string()],
      bucket: [bucket, string()],
    });
    req.header('Content-MD5', mapped.contentMD5);
    req.header(
      'x-amz-bucket-object-lock-token',
      mapped.xAmzBucketObjectLockToken
    );
    req.query('replication', mapped.replication);
    req.text(mapped.body);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.call(requestOptions);
  }

  /**
   * Deletes the replication configuration from the bucket.
   *
   * @param replication
   * @param bucket
   * @return Response from the API call
   */
  async deleteBucketReplication(
    replication: string,
    bucket: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      replication: [replication, string()],
      bucket: [bucket, string()],
    });
    req.query('replication', mapped.replication);
    req.appendTemplatePath`/${mapped.bucket}`;
    return req.callAsJson(unknown(), requestOptions);
  }
}
