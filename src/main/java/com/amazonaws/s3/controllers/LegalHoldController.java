/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class LegalHoldController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public LegalHoldController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Gets an object's current Legal Hold status. For more information, see Locking Objects.
     * @param  legalHold  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void legalHold(
            final String legalHold,
            final String xAmzContentSha256,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareLegalHoldRequest(legalHold, xAmzContentSha256, bucket, key).execute();
    }

    /**
     * Gets an object's current Legal Hold status. For more information, see Locking Objects.
     * @param  legalHold  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> legalHoldAsync(
            final String legalHold,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        try {
            return prepareLegalHoldRequest(legalHold, xAmzContentSha256, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for legalHold.
     */
    private ApiCall<Void, ApiException> prepareLegalHoldRequest(
            final String legalHold,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .queryParam(param -> param.key("legal-hold")
                                .value(legalHold))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets an object's current Legal Hold status. For more information, see Locking Objects.
     * @param  legalHold  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void legalHold1(
            final String legalHold,
            final String contentMD5,
            final String body,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareLegalHold1Request(legalHold, contentMD5, body, bucket, key).execute();
    }

    /**
     * Gets an object's current Legal Hold status. For more information, see Locking Objects.
     * @param  legalHold  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> legalHold1Async(
            final String legalHold,
            final String contentMD5,
            final String body,
            final String bucket,
            final String key) {
        try {
            return prepareLegalHold1Request(legalHold, contentMD5, body, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for legalHold1.
     */
    private ApiCall<Void, ApiException> prepareLegalHold1Request(
            final String legalHold,
            final String contentMD5,
            final String body,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("legal-hold")
                                .value(legalHold))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-MD5")
                                .value(contentMD5).isRequired(false))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}