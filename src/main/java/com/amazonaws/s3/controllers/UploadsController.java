/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.ListMultipartUploadsResult;
import com.amazonaws.s3.utilities.FileWrapper;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.MutliPartRequestType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import javax.xml.bind.JAXBException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UploadsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public UploadsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This operation initiates a multipart upload and returns an upload ID. This upload ID is used
     * to associate all of the parts in the specific multipart upload. You specify this upload ID in
     * each of your subsequent upload part requests (see UploadPart). You also include this upload
     * ID in the final request to either complete or abort the multipart upload request.
     * @param  uploads  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  file  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void createMultipart(
            final String uploads,
            final String xAmzContentSha256,
            final FileWrapper file,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareCreateMultipartRequest(uploads, xAmzContentSha256, file, bucket, key).execute();
    }

    /**
     * This operation initiates a multipart upload and returns an upload ID. This upload ID is used
     * to associate all of the parts in the specific multipart upload. You specify this upload ID in
     * each of your subsequent upload part requests (see UploadPart). You also include this upload
     * ID in the final request to either complete or abort the multipart upload request.
     * @param  uploads  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  file  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> createMultipartAsync(
            final String uploads,
            final String xAmzContentSha256,
            final FileWrapper file,
            final String bucket,
            final String key) {
        try {
            return prepareCreateMultipartRequest(uploads, xAmzContentSha256, file, bucket,
            key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for createMultipart.
     */
    private ApiCall<Void, ApiException> prepareCreateMultipartRequest(
            final String uploads,
            final String xAmzContentSha256,
            final FileWrapper file,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .formParam(param -> param.key("File")
                                .value(file)
                                .multiPartRequestType(MutliPartRequestType.MULTI_PART_FILE)
                                .multipartHeaders("content-type", "application/octect-stream"))
                        .queryParam(param -> param.key("uploads")
                                .value(uploads))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation lists in-progress multipart uploads. An in-progress multipart upload is a
     * multipart upload that has been initiated using the Initiate Multipart Upload request, but has
     * not yet been completed or aborted.
     * @param  uploads  Required parameter:
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  keyMarker  Required parameter:
     * @param  maxUploads  Required parameter:
     * @param  prefix  Required parameter:
     * @param  uploadIdMarker  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the ListMultipartUploadsResult response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public ListMultipartUploadsResult multipart(
            final String uploads,
            final String delimiter,
            final String encodingType,
            final String keyMarker,
            final String maxUploads,
            final String prefix,
            final String uploadIdMarker,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException, JAXBException {
        return prepareMultipartRequest(uploads, delimiter, encodingType, keyMarker, maxUploads,
                prefix, uploadIdMarker, xAmzContentSha256, bucket).execute();
    }

    /**
     * This operation lists in-progress multipart uploads. An in-progress multipart upload is a
     * multipart upload that has been initiated using the Initiate Multipart Upload request, but has
     * not yet been completed or aborted.
     * @param  uploads  Required parameter:
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  keyMarker  Required parameter:
     * @param  maxUploads  Required parameter:
     * @param  prefix  Required parameter:
     * @param  uploadIdMarker  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the ListMultipartUploadsResult response from the API call
     */
    public CompletableFuture<ListMultipartUploadsResult> multipartAsync(
            final String uploads,
            final String delimiter,
            final String encodingType,
            final String keyMarker,
            final String maxUploads,
            final String prefix,
            final String uploadIdMarker,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareMultipartRequest(uploads, delimiter, encodingType, keyMarker, maxUploads, prefix,
            uploadIdMarker, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for multipart.
     */
    private ApiCall<ListMultipartUploadsResult, ApiException> prepareMultipartRequest(
            final String uploads,
            final String delimiter,
            final String encodingType,
            final String keyMarker,
            final String maxUploads,
            final String prefix,
            final String uploadIdMarker,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<ListMultipartUploadsResult, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("uploads")
                                .value(uploads))
                        .queryParam(param -> param.key("Delimiter")
                                .value(delimiter))
                        .queryParam(param -> param.key("EncodingType")
                                .value(encodingType))
                        .queryParam(param -> param.key("KeyMarker")
                                .value(keyMarker))
                        .queryParam(param -> param.key("MaxUploads")
                                .value(maxUploads))
                        .queryParam(param -> param.key("Prefix")
                                .value(prefix))
                        .queryParam(param -> param.key("UploadIdMarker")
                                .value(uploadIdMarker))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response,
                                        ListMultipartUploadsResult.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void completeMultipart(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareCompleteMultipartRequest(uploadId, xAmzContentSha256, body, bucket, key).execute();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> completeMultipartAsync(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        try {
            return prepareCompleteMultipartRequest(uploadId, xAmzContentSha256, body, bucket,
            key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for completeMultipart.
     */
    private ApiCall<Void, ApiException> prepareCompleteMultipartRequest(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("UploadId")
                                .value(uploadId))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void part(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) throws ApiException, IOException {
        preparePartRequest(uploadId, xAmzContentSha256, body, bucket, key).execute();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> partAsync(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        try {
            return preparePartRequest(uploadId, xAmzContentSha256, body, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for part.
     */
    private ApiCall<Void, ApiException> preparePartRequest(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("UploadId")
                                .value(uploadId))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  partNumber  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void partCopy(
            final String uploadId,
            final String partNumber,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) throws ApiException, IOException {
        preparePartCopyRequest(uploadId, partNumber, xAmzContentSha256, body, bucket,
                key).execute();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  partNumber  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> partCopyAsync(
            final String uploadId,
            final String partNumber,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        try {
            return preparePartCopyRequest(uploadId, partNumber, xAmzContentSha256, body, bucket,
            key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for partCopy.
     */
    private ApiCall<Void, ApiException> preparePartCopyRequest(
            final String uploadId,
            final String partNumber,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("UploadId")
                                .value(uploadId))
                        .queryParam(param -> param.key("PartNumber")
                                .value(partNumber))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void abortMultipart(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareAbortMultipartRequest(uploadId, xAmzContentSha256, body, bucket, key).execute();
    }

    /**
     * Completes a multipart upload by assembling previously uploaded parts.
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> abortMultipartAsync(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        try {
            return prepareAbortMultipartRequest(uploadId, xAmzContentSha256, body, bucket,
            key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for abortMultipart.
     */
    private ApiCall<Void, ApiException> prepareAbortMultipartRequest(
            final String uploadId,
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("UploadId")
                                .value(uploadId))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}