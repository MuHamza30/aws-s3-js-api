/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.DynamicResponse;
import com.amazonaws.s3.models.ListBucketResult1;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import javax.xml.bind.JAXBException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ObjectsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ObjectsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * The HEAD operation retrieves metadata from an object without returning the object itself.
     * This operation is useful if you're only interested in an object's metadata. To use HEAD, you
     * must have READ access to the object.
     * @param  partNumber  Required parameter:
     * @param  versionId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void object(
            final String partNumber,
            final String versionId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareObjectRequest(partNumber, versionId, xAmzContentSha256, bucket, key).execute();
    }

    /**
     * The HEAD operation retrieves metadata from an object without returning the object itself.
     * This operation is useful if you're only interested in an object's metadata. To use HEAD, you
     * must have READ access to the object.
     * @param  partNumber  Required parameter:
     * @param  versionId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> objectAsync(
            final String partNumber,
            final String versionId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        try {
            return prepareObjectRequest(partNumber, versionId, xAmzContentSha256, bucket,
            key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for object.
     */
    private ApiCall<Void, ApiException> prepareObjectRequest(
            final String partNumber,
            final String versionId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .queryParam(param -> param.key("PartNumber")
                                .value(partNumber))
                        .queryParam(param -> param.key("VersionId")
                                .value(versionId))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Request",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns some or all (up to 1000) of the objects in a bucket. You can use the request
     * parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK
     * response can contain valid or invalid XML. Be sure to design your application to parse the
     * contents of the response and handle it appropriately.
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  marker  Required parameter:
     * @param  maxKeys  Required parameter:
     * @param  prefix  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the ListBucketResult1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public ListBucketResult1 objectsV1(
            final String delimiter,
            final String encodingType,
            final String marker,
            final String maxKeys,
            final String prefix,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException, JAXBException {
        return prepareObjectsV1Request(delimiter, encodingType, marker, maxKeys, prefix,
                xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns some or all (up to 1000) of the objects in a bucket. You can use the request
     * parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK
     * response can contain valid or invalid XML. Be sure to design your application to parse the
     * contents of the response and handle it appropriately.
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  marker  Required parameter:
     * @param  maxKeys  Required parameter:
     * @param  prefix  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the ListBucketResult1 response from the API call
     */
    public CompletableFuture<ListBucketResult1> objectsV1Async(
            final String delimiter,
            final String encodingType,
            final String marker,
            final String maxKeys,
            final String prefix,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareObjectsV1Request(delimiter, encodingType, marker, maxKeys, prefix,
            xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for objectsV1.
     */
    private ApiCall<ListBucketResult1, ApiException> prepareObjectsV1Request(
            final String delimiter,
            final String encodingType,
            final String marker,
            final String maxKeys,
            final String prefix,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<ListBucketResult1, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("Delimiter")
                                .value(delimiter))
                        .queryParam(param -> param.key("EncodingType")
                                .value(encodingType))
                        .queryParam(param -> param.key("Marker")
                                .value(marker))
                        .queryParam(param -> param.key("MaxKeys")
                                .value(maxKeys))
                        .queryParam(param -> param.key("Prefix")
                                .value(prefix))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response,
                                        ListBucketResult1.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns some or all (up to 1000) of the objects in a bucket. You can use the request
     * parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK
     * response can contain valid or invalid XML. Be sure to design your application to parse the
     * contents of the response and handle it appropriately.
     * @param  listType  Required parameter:
     * @param  continuationToken  Required parameter:
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  fetchOwner  Required parameter:
     * @param  maxKeys  Required parameter:
     * @param  prefix  Required parameter:
     * @param  startAfter  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void objectsV2(
            final int listType,
            final String continuationToken,
            final String delimiter,
            final String encodingType,
            final String fetchOwner,
            final String maxKeys,
            final String prefix,
            final String startAfter,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        prepareObjectsV2Request(listType, continuationToken, delimiter, encodingType, fetchOwner,
                maxKeys, prefix, startAfter, xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns some or all (up to 1000) of the objects in a bucket. You can use the request
     * parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK
     * response can contain valid or invalid XML. Be sure to design your application to parse the
     * contents of the response and handle it appropriately.
     * @param  listType  Required parameter:
     * @param  continuationToken  Required parameter:
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  fetchOwner  Required parameter:
     * @param  maxKeys  Required parameter:
     * @param  prefix  Required parameter:
     * @param  startAfter  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> objectsV2Async(
            final int listType,
            final String continuationToken,
            final String delimiter,
            final String encodingType,
            final String fetchOwner,
            final String maxKeys,
            final String prefix,
            final String startAfter,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareObjectsV2Request(listType, continuationToken, delimiter, encodingType, fetchOwner,
            maxKeys, prefix, startAfter, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for objectsV2.
     */
    private ApiCall<Void, ApiException> prepareObjectsV2Request(
            final int listType,
            final String continuationToken,
            final String delimiter,
            final String encodingType,
            final String fetchOwner,
            final String maxKeys,
            final String prefix,
            final String startAfter,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("list-type")
                                .value(listType).isRequired(false))
                        .queryParam(param -> param.key("ContinuationToken")
                                .value(continuationToken))
                        .queryParam(param -> param.key("Delimiter")
                                .value(delimiter))
                        .queryParam(param -> param.key("EncodingType")
                                .value(encodingType))
                        .queryParam(param -> param.key("FetchOwner")
                                .value(fetchOwner))
                        .queryParam(param -> param.key("MaxKeys")
                                .value(maxKeys))
                        .queryParam(param -> param.key("Prefix")
                                .value(prefix))
                        .queryParam(param -> param.key("StartAfter")
                                .value(startAfter))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves objects from Amazon S3. To use GET, you must have READ access to the object. If you
     * grant READ access to the anonymous user, you can return the object without using an
     * authorization header.
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void object1(
            final String xAmzContentSha256,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareObject1Request(xAmzContentSha256, bucket, key).execute();
    }

    /**
     * Retrieves objects from Amazon S3. To use GET, you must have READ access to the object. If you
     * grant READ access to the anonymous user, you can return the object without using an
     * authorization header.
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> object1Async(
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        try {
            return prepareObject1Request(xAmzContentSha256, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for object1.
     */
    private ApiCall<Void, ApiException> prepareObject1Request(
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the parts that have been uploaded for a specific multipart upload. This operation must
     * include the upload ID, which you obtain by sending the initiate multipart upload request (see
     * CreateMultipartUpload). This request returns a maximum of 1,000 uploaded parts. The default
     * number of parts returned is 1,000 parts. You can restrict the number of parts returned by
     * specifying the max-parts request parameter. If your multipart upload consists of more than
     * 1,000 parts, the response returns an IsTruncated field with the value of true, and a
     * NextPartNumberMarker element. In subsequent ListParts requests you can include the
     * part-number-marker query string parameter and set its value to the NextPartNumberMarker field
     * value from the previous response.
     * @param  maxParts  Required parameter:
     * @param  partNumberMarker  Required parameter:
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void parts(
            final String maxParts,
            final String partNumberMarker,
            final String uploadId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) throws ApiException, IOException {
        preparePartsRequest(maxParts, partNumberMarker, uploadId, xAmzContentSha256, bucket,
                key).execute();
    }

    /**
     * Lists the parts that have been uploaded for a specific multipart upload. This operation must
     * include the upload ID, which you obtain by sending the initiate multipart upload request (see
     * CreateMultipartUpload). This request returns a maximum of 1,000 uploaded parts. The default
     * number of parts returned is 1,000 parts. You can restrict the number of parts returned by
     * specifying the max-parts request parameter. If your multipart upload consists of more than
     * 1,000 parts, the response returns an IsTruncated field with the value of true, and a
     * NextPartNumberMarker element. In subsequent ListParts requests you can include the
     * part-number-marker query string parameter and set its value to the NextPartNumberMarker field
     * value from the previous response.
     * @param  maxParts  Required parameter:
     * @param  partNumberMarker  Required parameter:
     * @param  uploadId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> partsAsync(
            final String maxParts,
            final String partNumberMarker,
            final String uploadId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        try {
            return preparePartsRequest(maxParts, partNumberMarker, uploadId, xAmzContentSha256, bucket,
            key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for parts.
     */
    private ApiCall<Void, ApiException> preparePartsRequest(
            final String maxParts,
            final String partNumberMarker,
            final String uploadId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .queryParam(param -> param.key("MaxParts")
                                .value(maxParts))
                        .queryParam(param -> param.key("PartNumberMarker")
                                .value(partNumberMarker))
                        .queryParam(param -> param.key("UploadId")
                                .value(uploadId))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a copy of an object that is already stored in Amazon S3.
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse copyObject(
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) throws ApiException, IOException {
        return prepareCopyObjectRequest(xAmzContentSha256, body, bucket, key).execute();
    }

    /**
     * Creates a copy of an object that is already stored in Amazon S3.
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> copyObjectAsync(
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        try {
            return prepareCopyObjectRequest(xAmzContentSha256, body, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for copyObject.
     */
    private ApiCall<DynamicResponse, ApiException> prepareCopyObjectRequest(
            final String xAmzContentSha256,
            final String body,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}/")
                        .bodyParam(param -> param.value(body))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removes the null version (if there is one) of an object and inserts a delete marker, which
     * becomes the latest version of the object. If there isn't a null version, Amazon S3 does not
     * remove any objects.
     * @param  versionId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteObject(
            final String versionId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) throws ApiException, IOException {
        prepareDeleteObjectRequest(versionId, xAmzContentSha256, bucket, key).execute();
    }

    /**
     * Removes the null version (if there is one) of an object and inserts a delete marker, which
     * becomes the latest version of the object. If there isn't a null version, Amazon S3 does not
     * remove any objects.
     * @param  versionId  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteObjectAsync(
            final String versionId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        try {
            return prepareDeleteObjectRequest(versionId, xAmzContentSha256, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for deleteObject.
     */
    private ApiCall<Void, ApiException> prepareDeleteObjectRequest(
            final String versionId,
            final String xAmzContentSha256,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .queryParam(param -> param.key("VersionId")
                                .value(versionId))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation enables you to delete multiple objects from a bucket using a single HTTP
     * request. If you know the object keys that you want to delete, then this operation provides a
     * suitable alternative to sending individual delete requests, reducing per-request overhead.
     * @param  delete  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteObjects(
            final String delete,
            final String xAmzContentSha256,
            final String body,
            final String bucket) throws ApiException, IOException {
        prepareDeleteObjectsRequest(delete, xAmzContentSha256, body, bucket).execute();
    }

    /**
     * This operation enables you to delete multiple objects from a bucket using a single HTTP
     * request. If you know the object keys that you want to delete, then this operation provides a
     * suitable alternative to sending individual delete requests, reducing per-request overhead.
     * @param  delete  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteObjectsAsync(
            final String delete,
            final String xAmzContentSha256,
            final String body,
            final String bucket) {
        try {
            return prepareDeleteObjectsRequest(delete, xAmzContentSha256, body, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for deleteObjects.
     */
    private ApiCall<Void, ApiException> prepareDeleteObjectsRequest(
            final String delete,
            final String xAmzContentSha256,
            final String body,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("delete")
                                .value(delete))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}