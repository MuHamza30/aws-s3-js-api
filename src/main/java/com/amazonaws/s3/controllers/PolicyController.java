/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.BucketPolicy;
import com.amazonaws.s3.models.BucketPolicyRequest;
import com.amazonaws.s3.models.DynamicResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PolicyController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PolicyController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns the policy of a specified bucket. If you are using an identity other than the root
     * user of the AWS account that owns the bucket, the calling identity must have the
     * GetBucketPolicy permissions on the specified bucket and belong to the bucket owner's account
     * in order to use this operation.
     * @param  policy  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the BucketPolicy response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BucketPolicy bucketPolicy(
            final String policy,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        return prepareBucketPolicyRequest(policy, xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns the policy of a specified bucket. If you are using an identity other than the root
     * user of the AWS account that owns the bucket, the calling identity must have the
     * GetBucketPolicy permissions on the specified bucket and belong to the bucket owner's account
     * in order to use this operation.
     * @param  policy  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the BucketPolicy response from the API call
     */
    public CompletableFuture<BucketPolicy> bucketPolicyAsync(
            final String policy,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketPolicyRequest(policy, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketPolicy.
     */
    private ApiCall<BucketPolicy, ApiException> prepareBucketPolicyRequest(
            final String policy,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<BucketPolicy, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("policy")
                                .value(policy))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BucketPolicy.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Applies an Amazon S3 bucket policy to an Amazon S3 bucket. If you are using an identity other
     * than the root user of the AWS account that owns the bucket, the calling identity must have
     * the PutBucketPolicy permissions on the specified bucket and belong to the bucket owner's
     * account in order to use this operation.
     * @param  policy  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  xAmzConfirmRemoveSelfBucketAccess  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse bucketPolicy1(
            final String policy,
            final String contentMD5,
            final String xAmzConfirmRemoveSelfBucketAccess,
            final BucketPolicyRequest body,
            final String bucket) throws ApiException, IOException {
        return prepareBucketPolicy1Request(policy, contentMD5, xAmzConfirmRemoveSelfBucketAccess,
                body, bucket).execute();
    }

    /**
     * Applies an Amazon S3 bucket policy to an Amazon S3 bucket. If you are using an identity other
     * than the root user of the AWS account that owns the bucket, the calling identity must have
     * the PutBucketPolicy permissions on the specified bucket and belong to the bucket owner's
     * account in order to use this operation.
     * @param  policy  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  xAmzConfirmRemoveSelfBucketAccess  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> bucketPolicy1Async(
            final String policy,
            final String contentMD5,
            final String xAmzConfirmRemoveSelfBucketAccess,
            final BucketPolicyRequest body,
            final String bucket) {
        try {
            return prepareBucketPolicy1Request(policy, contentMD5, xAmzConfirmRemoveSelfBucketAccess, body,
            bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketPolicy1.
     */
    private ApiCall<DynamicResponse, ApiException> prepareBucketPolicy1Request(
            final String policy,
            final String contentMD5,
            final String xAmzConfirmRemoveSelfBucketAccess,
            final BucketPolicyRequest body,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("policy")
                                .value(policy))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-MD5")
                                .value(contentMD5).isRequired(false))
                        .headerParam(param -> param.key("x-amz-confirm-remove-self-bucket-access")
                                .value(xAmzConfirmRemoveSelfBucketAccess).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the policy status for an Amazon S3 bucket, indicating whether the bucket is public.
     * In order to use this operation, you must have the s3:GetBucketPolicyStatus permission. For
     * more information about Amazon S3 permissions, see Specifying Permissions in a Policy.
     * @param  policyStatus  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String bucketPolicyStatus(
            final String policyStatus,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        return prepareBucketPolicyStatusRequest(policyStatus, xAmzContentSha256, bucket).execute();
    }

    /**
     * Retrieves the policy status for an Amazon S3 bucket, indicating whether the bucket is public.
     * In order to use this operation, you must have the s3:GetBucketPolicyStatus permission. For
     * more information about Amazon S3 permissions, see Specifying Permissions in a Policy.
     * @param  policyStatus  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> bucketPolicyStatusAsync(
            final String policyStatus,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketPolicyStatusRequest(policyStatus, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketPolicyStatus.
     */
    private ApiCall<String, ApiException> prepareBucketPolicyStatusRequest(
            final String policyStatus,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("policyStatus")
                                .value(policyStatus))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This implementation of the DELETE operation uses the policysubresource to delete the policy
     * of a specified bucket. If you are using an identity other than the root user of the AWS
     * account that owns the bucket, the calling identity must have the DeleteBucketPolicy
     * permissions on the specified bucket and belong to the bucket owner's account in order to use
     * this operation.
     * @param  policy  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse deleteBucketPolicy(
            final String policy,
            final String bucket) throws ApiException, IOException {
        return prepareDeleteBucketPolicyRequest(policy, bucket).execute();
    }

    /**
     * This implementation of the DELETE operation uses the policysubresource to delete the policy
     * of a specified bucket. If you are using an identity other than the root user of the AWS
     * account that owns the bucket, the calling identity must have the DeleteBucketPolicy
     * permissions on the specified bucket and belong to the bucket owner's account in order to use
     * this operation.
     * @param  policy  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> deleteBucketPolicyAsync(
            final String policy,
            final String bucket) {
        try {
            return prepareDeleteBucketPolicyRequest(policy, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for deleteBucketPolicy.
     */
    private ApiCall<DynamicResponse, ApiException> prepareDeleteBucketPolicyRequest(
            final String policy,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("policy")
                                .value(policy))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}