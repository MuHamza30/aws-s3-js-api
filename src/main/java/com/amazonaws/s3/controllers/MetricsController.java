/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MetricsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public MetricsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Gets a metrics configuration (specified by the metrics configuration ID) from the bucket.
     * Note that this doesn't include the daily storage metrics.
     * @param  metrics  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String bucketMetricsConfiguration(
            final String metrics,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        return prepareBucketMetricsConfigurationRequest(metrics, xAmzContentSha256,
                bucket).execute();
    }

    /**
     * Gets a metrics configuration (specified by the metrics configuration ID) from the bucket.
     * Note that this doesn't include the daily storage metrics.
     * @param  metrics  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> bucketMetricsConfigurationAsync(
            final String metrics,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketMetricsConfigurationRequest(metrics, xAmzContentSha256,
            bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketMetricsConfiguration.
     */
    private ApiCall<String, ApiException> prepareBucketMetricsConfigurationRequest(
            final String metrics,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("metrics")
                                .value(metrics))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Sets a metrics configuration (specified by the metrics configuration ID) for the bucket. You
     * can have up to 1,000 metrics configurations per bucket. If you're updating an existing
     * metrics configuration, note that this is a full replacement of the existing metrics
     * configuration. If you don't include the elements you want to keep, they are erased.
     * @param  metrics  Required parameter:
     * @param  id  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void bucketMetricsConfiguration1(
            final String metrics,
            final String id,
            final String body,
            final String bucket) throws ApiException, IOException {
        prepareBucketMetricsConfiguration1Request(metrics, id, body, bucket).execute();
    }

    /**
     * Sets a metrics configuration (specified by the metrics configuration ID) for the bucket. You
     * can have up to 1,000 metrics configurations per bucket. If you're updating an existing
     * metrics configuration, note that this is a full replacement of the existing metrics
     * configuration. If you don't include the elements you want to keep, they are erased.
     * @param  metrics  Required parameter:
     * @param  id  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> bucketMetricsConfiguration1Async(
            final String metrics,
            final String id,
            final String body,
            final String bucket) {
        try {
            return prepareBucketMetricsConfiguration1Request(metrics, id, body, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketMetricsConfiguration1.
     */
    private ApiCall<Void, ApiException> prepareBucketMetricsConfiguration1Request(
            final String metrics,
            final String id,
            final String body,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("metrics")
                                .value(metrics))
                        .queryParam(param -> param.key("Id")
                                .value(id))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Lists the metrics configurations for the bucket. The metrics configurations are only for the
     * request metrics of the bucket and do not provide information on daily storage metrics. You
     * can have up to 1,000 configurations per bucket.
     * @param  metrics  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String listBucketMetricsConfigurations(
            final String metrics,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        return prepareListBucketMetricsConfigurationsRequest(metrics, xAmzContentSha256,
                bucket).execute();
    }

    /**
     * Lists the metrics configurations for the bucket. The metrics configurations are only for the
     * request metrics of the bucket and do not provide information on daily storage metrics. You
     * can have up to 1,000 configurations per bucket.
     * @param  metrics  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> listBucketMetricsConfigurationsAsync(
            final String metrics,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareListBucketMetricsConfigurationsRequest(metrics, xAmzContentSha256,
            bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for listBucketMetricsConfigurations.
     */
    private ApiCall<String, ApiException> prepareListBucketMetricsConfigurationsRequest(
            final String metrics,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("metrics")
                                .value(metrics))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes a metrics configuration for the Amazon CloudWatch request metrics (specified by the
     * metrics configuration ID) from the bucket. Note that this doesn't include the daily storage
     * metrics.
     * @param  metrics  Required parameter:
     * @param  id  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteBucketMetricsConfiguration(
            final String metrics,
            final String id,
            final String bucket) throws ApiException, IOException {
        prepareDeleteBucketMetricsConfigurationRequest(metrics, id, bucket).execute();
    }

    /**
     * Deletes a metrics configuration for the Amazon CloudWatch request metrics (specified by the
     * metrics configuration ID) from the bucket. Note that this doesn't include the daily storage
     * metrics.
     * @param  metrics  Required parameter:
     * @param  id  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteBucketMetricsConfigurationAsync(
            final String metrics,
            final String id,
            final String bucket) {
        try {
            return prepareDeleteBucketMetricsConfigurationRequest(metrics, id, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for deleteBucketMetricsConfiguration.
     */
    private ApiCall<Void, ApiException> prepareDeleteBucketMetricsConfigurationRequest(
            final String metrics,
            final String id,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("metrics")
                                .value(metrics))
                        .queryParam(param -> param.key("Id")
                                .value(id))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}