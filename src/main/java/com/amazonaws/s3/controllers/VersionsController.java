/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.ListVersionsResult;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import javax.xml.bind.JAXBException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class VersionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public VersionsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns metadata about all of the versions of objects in a bucket. You can also use request
     * parameters as selection criteria to return metadata about a subset of all the object
     * versions.
     * @param  versions  Required parameter:
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  keyMarker  Required parameter:
     * @param  maxKeys  Required parameter:
     * @param  prefix  Required parameter:
     * @param  versionIdMarker  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the ListVersionsResult response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public ListVersionsResult objectVersions(
            final String versions,
            final String delimiter,
            final String encodingType,
            final String keyMarker,
            final String maxKeys,
            final String prefix,
            final String versionIdMarker,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException, JAXBException {
        return prepareObjectVersionsRequest(versions, delimiter, encodingType, keyMarker, maxKeys,
                prefix, versionIdMarker, xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns metadata about all of the versions of objects in a bucket. You can also use request
     * parameters as selection criteria to return metadata about a subset of all the object
     * versions.
     * @param  versions  Required parameter:
     * @param  delimiter  Required parameter:
     * @param  encodingType  Required parameter:
     * @param  keyMarker  Required parameter:
     * @param  maxKeys  Required parameter:
     * @param  prefix  Required parameter:
     * @param  versionIdMarker  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the ListVersionsResult response from the API call
     */
    public CompletableFuture<ListVersionsResult> objectVersionsAsync(
            final String versions,
            final String delimiter,
            final String encodingType,
            final String keyMarker,
            final String maxKeys,
            final String prefix,
            final String versionIdMarker,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareObjectVersionsRequest(versions, delimiter, encodingType, keyMarker, maxKeys,
            prefix, versionIdMarker, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for objectVersions.
     */
    private ApiCall<ListVersionsResult, ApiException> prepareObjectVersionsRequest(
            final String versions,
            final String delimiter,
            final String encodingType,
            final String keyMarker,
            final String maxKeys,
            final String prefix,
            final String versionIdMarker,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<ListVersionsResult, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("versions")
                                .value(versions))
                        .queryParam(param -> param.key("Delimiter")
                                .value(delimiter))
                        .queryParam(param -> param.key("EncodingType")
                                .value(encodingType))
                        .queryParam(param -> param.key("KeyMarker")
                                .value(keyMarker))
                        .queryParam(param -> param.key("MaxKeys")
                                .value(maxKeys))
                        .queryParam(param -> param.key("Prefix")
                                .value(prefix))
                        .queryParam(param -> param.key("VersionIdMarker")
                                .value(versionIdMarker))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response,
                                        ListVersionsResult.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}