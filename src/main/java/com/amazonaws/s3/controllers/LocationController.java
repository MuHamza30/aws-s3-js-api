/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import javax.xml.bind.JAXBException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class LocationController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public LocationController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns the region the bucket resides in. You set the bucket's region using the
     * LocationConstraint request parameter in a CreateBucket request. For more information, see
     * CreateBucket.
     * @param  location  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public String bucketLocation(
            final String location,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException, JAXBException {
        return prepareBucketLocationRequest(location, xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns the region the bucket resides in. You set the bucket's region using the
     * LocationConstraint request parameter in a CreateBucket request. For more information, see
     * CreateBucket.
     * @param  location  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> bucketLocationAsync(
            final String location,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketLocationRequest(location, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketLocation.
     */
    private ApiCall<String, ApiException> prepareBucketLocationRequest(
            final String location,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("location")
                                .value(location))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response, String.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}