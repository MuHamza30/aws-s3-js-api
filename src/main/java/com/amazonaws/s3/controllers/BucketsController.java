/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.DynamicResponse;
import com.amazonaws.s3.models.ListAllMyBucketsResult;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import javax.xml.bind.JAXBException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class BucketsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public BucketsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse head(
            final String bucket) throws ApiException, IOException {
        return prepareHeadRequest(bucket).execute();
    }

    /**
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> headAsync(
            final String bucket) {
        try {
            return prepareHeadRequest(bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for head.
     */
    private ApiCall<DynamicResponse, ApiException> prepareHeadRequest(
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/")
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of all buckets owned by the authenticated sender of the request.
     * @return    Returns the ListAllMyBucketsResult response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public ListAllMyBucketsResult list() throws ApiException, IOException, JAXBException {
        return prepareListRequest().execute();
    }

    /**
     * Returns a list of all buckets owned by the authenticated sender of the request.
     * @return    Returns the ListAllMyBucketsResult response from the API call
     */
    public CompletableFuture<ListAllMyBucketsResult> listAsync() {
        try {
            return prepareListRequest().executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for list.
     */
    private ApiCall<ListAllMyBucketsResult, ApiException> prepareListRequest() {
        return new ApiCall.Builder<ListAllMyBucketsResult, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/")
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response,
                                        ListAllMyBucketsResult.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new bucket. To create a bucket, you must register with Amazon S3 and have a valid
     * AWS Access Key ID to authenticate requests. Anonymous requests are never allowed to create
     * buckets. By creating the bucket, you become the bucket owner.
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse create(
            final String body,
            final String bucket) throws ApiException, IOException {
        return prepareCreateRequest(body, bucket).execute();
    }

    /**
     * Creates a new bucket. To create a bucket, you must register with Amazon S3 and have a valid
     * AWS Access Key ID to authenticate requests. Anonymous requests are never allowed to create
     * buckets. By creating the bucket, you become the bucket owner.
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> createAsync(
            final String body,
            final String bucket) {
        try {
            return prepareCreateRequest(body, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for create.
     */
    private ApiCall<DynamicResponse, ApiException> prepareCreateRequest(
            final String body,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/")
                        .bodyParam(param -> param.value(body))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param ->param.key("content-type").value("text/plain; charset=utf-8"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes the bucket. All objects (including all object versions and Delete Markers) in the
     * bucket must be deleted before the bucket itself can be deleted.
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void delete(
            final String bucket) throws ApiException, IOException {
        prepareDeleteRequest(bucket).execute();
    }

    /**
     * Deletes the bucket. All objects (including all object versions and Delete Markers) in the
     * bucket must be deleted before the bucket itself can be deleted.
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteAsync(
            final String bucket) {
        try {
            return prepareDeleteRequest(bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for delete.
     */
    private ApiCall<Void, ApiException> prepareDeleteRequest(
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}