/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import javax.xml.bind.JAXBException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class LoggingController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public LoggingController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns the logging status of a bucket and the permissions users have to view and modify that
     * status. To use GET, you must be the bucket owner.
     * @param  logging  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public String bucketLogging(
            final String logging,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException, JAXBException {
        return prepareBucketLoggingRequest(logging, xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns the logging status of a bucket and the permissions users have to view and modify that
     * status. To use GET, you must be the bucket owner.
     * @param  logging  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> bucketLoggingAsync(
            final String logging,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketLoggingRequest(logging, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketLogging.
     */
    private ApiCall<String, ApiException> prepareBucketLoggingRequest(
            final String logging,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("logging")
                                .value(logging))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response, String.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Set the logging parameters for a bucket and to specify permissions for who can view and
     * modify the logging parameters. All logs are saved to buckets in the same AWS Region as the
     * source bucket. To set the logging status of a bucket, you must be the bucket owner.
     * @param  logging  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void bucketLogging1(
            final String logging,
            final String contentMD5,
            final String body,
            final String bucket) throws ApiException, IOException {
        prepareBucketLogging1Request(logging, contentMD5, body, bucket).execute();
    }

    /**
     * Set the logging parameters for a bucket and to specify permissions for who can view and
     * modify the logging parameters. All logs are saved to buckets in the same AWS Region as the
     * source bucket. To set the logging status of a bucket, you must be the bucket owner.
     * @param  logging  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> bucketLogging1Async(
            final String logging,
            final String contentMD5,
            final String body,
            final String bucket) {
        try {
            return prepareBucketLogging1Request(logging, contentMD5, body, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketLogging1.
     */
    private ApiCall<Void, ApiException> prepareBucketLogging1Request(
            final String logging,
            final String contentMD5,
            final String body,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("logging")
                                .value(logging))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-MD5")
                                .value(contentMD5).isRequired(false))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}