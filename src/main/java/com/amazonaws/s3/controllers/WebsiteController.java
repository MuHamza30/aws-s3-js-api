/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.DynamicResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class WebsiteController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public WebsiteController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns the website configuration for a bucket. To host website on Amazon S3, you can
     * configure a bucket as website by adding a website configuration. For more information about
     * hosting websites, see Hosting Websites on Amazon S3.
     * @param  website  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void website(
            final String website,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        prepareWebsiteRequest(website, xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns the website configuration for a bucket. To host website on Amazon S3, you can
     * configure a bucket as website by adding a website configuration. For more information about
     * hosting websites, see Hosting Websites on Amazon S3.
     * @param  website  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> websiteAsync(
            final String website,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareWebsiteRequest(website, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for website.
     */
    private ApiCall<Void, ApiException> prepareWebsiteRequest(
            final String website,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("website")
                                .value(website))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Sets the configuration of the website that is specified in the website subresource. To
     * configure a bucket as a website, you can add this subresource on the bucket with website
     * configuration information such as the file name of the index document and any redirect rules.
     * @param  website  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse website1(
            final String website,
            final String contentMD5,
            final String body,
            final String bucket) throws ApiException, IOException {
        return prepareWebsite1Request(website, contentMD5, body, bucket).execute();
    }

    /**
     * Sets the configuration of the website that is specified in the website subresource. To
     * configure a bucket as a website, you can add this subresource on the bucket with website
     * configuration information such as the file name of the index document and any redirect rules.
     * @param  website  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> website1Async(
            final String website,
            final String contentMD5,
            final String body,
            final String bucket) {
        try {
            return prepareWebsite1Request(website, contentMD5, body, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for website1.
     */
    private ApiCall<DynamicResponse, ApiException> prepareWebsite1Request(
            final String website,
            final String contentMD5,
            final String body,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("website")
                                .value(website))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-MD5")
                                .value(contentMD5).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This operation removes the website configuration for a bucket. Amazon S3 returns a 200 OK
     * response upon successfully deleting a website configuration on the specified bucket. You will
     * get a 200 OK response if the website configuration you are trying to delete does not exist on
     * the bucket. Amazon S3 returns a 404 response if the bucket specified in the request does not
     * exist.
     * @param  website  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse website2(
            final String website,
            final String bucket) throws ApiException, IOException {
        return prepareWebsite2Request(website, bucket).execute();
    }

    /**
     * This operation removes the website configuration for a bucket. Amazon S3 returns a 200 OK
     * response upon successfully deleting a website configuration on the specified bucket. You will
     * get a 200 OK response if the website configuration you are trying to delete does not exist on
     * the bucket. Amazon S3 returns a 404 response if the bucket specified in the request does not
     * exist.
     * @param  website  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> website2Async(
            final String website,
            final String bucket) {
        try {
            return prepareWebsite2Request(website, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for website2.
     */
    private ApiCall<DynamicResponse, ApiException> prepareWebsite2Request(
            final String website,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("website")
                                .value(website))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}