/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class NotificationsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public NotificationsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns the notification configuration of a bucket.
     * @param  notification  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void bucketNotificationCOnfiguration(
            final String notification,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        prepareBucketNotificationCOnfigurationRequest(notification, xAmzContentSha256,
                bucket).execute();
    }

    /**
     * Returns the notification configuration of a bucket.
     * @param  notification  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> bucketNotificationCOnfigurationAsync(
            final String notification,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketNotificationCOnfigurationRequest(notification, xAmzContentSha256,
            bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketNotificationCOnfiguration.
     */
    private ApiCall<Void, ApiException> prepareBucketNotificationCOnfigurationRequest(
            final String notification,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("notification")
                                .value(notification))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enables notifications of specified events for a bucket. For more information about event
     * notifications, see Configuring Event Notifications.
     * @param  notification  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void bucketNotificationCOnfiguration1(
            final String notification,
            final String body,
            final String bucket) throws ApiException, IOException {
        prepareBucketNotificationCOnfiguration1Request(notification, body, bucket).execute();
    }

    /**
     * Enables notifications of specified events for a bucket. For more information about event
     * notifications, see Configuring Event Notifications.
     * @param  notification  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> bucketNotificationCOnfiguration1Async(
            final String notification,
            final String body,
            final String bucket) {
        try {
            return prepareBucketNotificationCOnfiguration1Request(notification, body,
            bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketNotificationCOnfiguration1.
     */
    private ApiCall<Void, ApiException> prepareBucketNotificationCOnfiguration1Request(
            final String notification,
            final String body,
            final String bucket) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("notification")
                                .value(notification))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}