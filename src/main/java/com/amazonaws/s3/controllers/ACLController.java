/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.AccessControlPolicy;
import com.amazonaws.s3.models.AccessControlPolicy1;
import com.amazonaws.s3.models.DynamicResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import javax.xml.bind.JAXBException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ACLController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ACLController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This implementation of the GET operation uses the acl subresource to return the access
     * control list (ACL) of a bucket. To use GET to return the ACL of the bucket, you must have
     * READ_ACP access to the bucket. If READ_ACP permission is granted to the anonymous user, you
     * can return the ACL of the bucket without using an authorization header.
     * @param  acl  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the AccessControlPolicy response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public AccessControlPolicy bucketACL(
            final String acl,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException, JAXBException {
        return prepareBucketACLRequest(acl, xAmzContentSha256, bucket).execute();
    }

    /**
     * This implementation of the GET operation uses the acl subresource to return the access
     * control list (ACL) of a bucket. To use GET to return the ACL of the bucket, you must have
     * READ_ACP access to the bucket. If READ_ACP permission is granted to the anonymous user, you
     * can return the ACL of the bucket without using an authorization header.
     * @param  acl  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the AccessControlPolicy response from the API call
     */
    public CompletableFuture<AccessControlPolicy> bucketACLAsync(
            final String acl,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketACLRequest(acl, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketACL.
     */
    private ApiCall<AccessControlPolicy, ApiException> prepareBucketACLRequest(
            final String acl,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<AccessControlPolicy, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("acl")
                                .value(acl))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response,
                                        AccessControlPolicy.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Sets the permissions on an existing bucket using access control lists (ACL). For more
     * information, see Using ACLs. To set the ACL of a bucket, you must have WRITE_ACP permission.
     * @param  acl  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse bucketACL1(
            final String acl,
            final String body,
            final String bucket) throws ApiException, IOException {
        return prepareBucketACL1Request(acl, body, bucket).execute();
    }

    /**
     * Sets the permissions on an existing bucket using access control lists (ACL). For more
     * information, see Using ACLs. To set the ACL of a bucket, you must have WRITE_ACP permission.
     * @param  acl  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> bucketACL1Async(
            final String acl,
            final String body,
            final String bucket) {
        try {
            return prepareBucketACL1Request(acl, body, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketACL1.
     */
    private ApiCall<DynamicResponse, ApiException> prepareBucketACL1Request(
            final String acl,
            final String body,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("acl")
                                .value(acl))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the access control list (ACL) of an object. To use this operation, you must have
     * READ_ACP access to the object.
     * @param  acl  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the AccessControlPolicy1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     * @throws    JAXBException    Signals that a JAXB exception occurred.
     */
    public AccessControlPolicy1 aCL(
            final String acl,
            final String bucket,
            final String key) throws ApiException, IOException, JAXBException {
        return prepareACLRequest(acl, bucket, key).execute();
    }

    /**
     * Returns the access control list (ACL) of an object. To use this operation, you must have
     * READ_ACP access to the object.
     * @param  acl  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the AccessControlPolicy1 response from the API call
     */
    public CompletableFuture<AccessControlPolicy1> aCLAsync(
            final String acl,
            final String bucket,
            final String key) {
        try {
            return prepareACLRequest(acl, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for aCL.
     */
    private ApiCall<AccessControlPolicy1, ApiException> prepareACLRequest(
            final String acl,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<AccessControlPolicy1, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .queryParam(param -> param.key("acl")
                                .value(acl))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/xml"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeXml(response,
                                        AccessControlPolicy1.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the access control list (ACL) of an object. To use this operation, you must have
     * READ_ACP access to the object.
     * @param  acl  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse aCL1(
            final String acl,
            final String body,
            final String bucket,
            final String key) throws ApiException, IOException {
        return prepareACL1Request(acl, body, bucket, key).execute();
    }

    /**
     * Returns the access control list (ACL) of an object. To use this operation, you must have
     * READ_ACP access to the object.
     * @param  acl  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @param  key  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> aCL1Async(
            final String acl,
            final String body,
            final String bucket,
            final String key) {
        try {
            return prepareACL1Request(acl, body, bucket, key).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for aCL1.
     */
    private ApiCall<DynamicResponse, ApiException> prepareACL1Request(
            final String acl,
            final String body,
            final String bucket,
            final String key) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}/{key}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("acl")
                                .value(acl))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("key").value(key)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}