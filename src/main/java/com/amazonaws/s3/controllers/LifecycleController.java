/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import com.amazonaws.s3.ApiHelper;
import com.amazonaws.s3.Server;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.http.request.HttpMethod;
import com.amazonaws.s3.models.DynamicResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class LifecycleController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public LifecycleController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns the lifecycle configuration information set on the bucket. For information about
     * lifecycle configuration, see Object Lifecycle Management.
     * @param  lifecycle  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String bucketLifecycle(
            final String lifecycle,
            final String xAmzContentSha256,
            final String bucket) throws ApiException, IOException {
        return prepareBucketLifecycleRequest(lifecycle, xAmzContentSha256, bucket).execute();
    }

    /**
     * Returns the lifecycle configuration information set on the bucket. For information about
     * lifecycle configuration, see Object Lifecycle Management.
     * @param  lifecycle  Required parameter:
     * @param  xAmzContentSha256  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> bucketLifecycleAsync(
            final String lifecycle,
            final String xAmzContentSha256,
            final String bucket) {
        try {
            return prepareBucketLifecycleRequest(lifecycle, xAmzContentSha256, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketLifecycle.
     */
    private ApiCall<String, ApiException> prepareBucketLifecycleRequest(
            final String lifecycle,
            final String xAmzContentSha256,
            final String bucket) {
        return new ApiCall.Builder<String, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("lifecycle")
                                .value(lifecycle))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("x-amz-content-sha256")
                                .value(xAmzContentSha256).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> new String(response))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the
     * lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your
     * objects never expire, and Amazon S3 no longer automatically deletes any objects on the basis
     * of rules contained in the deleted lifecycle configuration.
     * @param  lifecycle  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse deleteBucketLifecycle(
            final String lifecycle,
            final String bucket) throws ApiException, IOException {
        return prepareDeleteBucketLifecycleRequest(lifecycle, bucket).execute();
    }

    /**
     * Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the
     * lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your
     * objects never expire, and Amazon S3 no longer automatically deletes any objects on the basis
     * of rules contained in the deleted lifecycle configuration.
     * @param  lifecycle  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> deleteBucketLifecycleAsync(
            final String lifecycle,
            final String bucket) {
        try {
            return prepareDeleteBucketLifecycleRequest(lifecycle, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for deleteBucketLifecycle.
     */
    private ApiCall<DynamicResponse, ApiException> prepareDeleteBucketLifecycleRequest(
            final String lifecycle,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .queryParam(param -> param.key("lifecycle")
                                .value(lifecycle))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle
     * configuration.
     * @param  lifecycle  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse bucketLifecycle1(
            final String lifecycle,
            final String contentMD5,
            final String body,
            final String bucket) throws ApiException, IOException {
        return prepareBucketLifecycle1Request(lifecycle, contentMD5, body, bucket).execute();
    }

    /**
     * Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle
     * configuration.
     * @param  lifecycle  Required parameter:
     * @param  contentMD5  Required parameter:
     * @param  body  Required parameter:
     * @param  bucket  Required parameter:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> bucketLifecycle1Async(
            final String lifecycle,
            final String contentMD5,
            final String body,
            final String bucket) {
        try {
            return prepareBucketLifecycle1Request(lifecycle, contentMD5, body, bucket).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for bucketLifecycle1.
     */
    private ApiCall<DynamicResponse, ApiException> prepareBucketLifecycle1Request(
            final String lifecycle,
            final String contentMD5,
            final String body,
            final String bucket) {
        return new ApiCall.Builder<DynamicResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/{bucket}")
                        .bodyParam(param -> param.value(body))
                        .queryParam(param -> param.key("lifecycle")
                                .value(lifecycle))
                        .templateParam(param -> param.key("bucket").value(bucket)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-MD5")
                                .value(contentMD5).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.DYNAMIC_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}