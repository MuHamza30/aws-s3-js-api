/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3;

import com.amazonaws.s3.controllers.ACLController;
import com.amazonaws.s3.controllers.AccelerateController;
import com.amazonaws.s3.controllers.AnalyticsController;
import com.amazonaws.s3.controllers.BucketsController;
import com.amazonaws.s3.controllers.CORSController;
import com.amazonaws.s3.controllers.EncryptionController;
import com.amazonaws.s3.controllers.InventoryController;
import com.amazonaws.s3.controllers.LegalHoldController;
import com.amazonaws.s3.controllers.LifecycleController;
import com.amazonaws.s3.controllers.LocationController;
import com.amazonaws.s3.controllers.LockController;
import com.amazonaws.s3.controllers.LoggingController;
import com.amazonaws.s3.controllers.MetricsController;
import com.amazonaws.s3.controllers.MiscController;
import com.amazonaws.s3.controllers.NotificationsController;
import com.amazonaws.s3.controllers.ObjectsController;
import com.amazonaws.s3.controllers.PaymentsController;
import com.amazonaws.s3.controllers.PolicyController;
import com.amazonaws.s3.controllers.PublicAccessBlockController;
import com.amazonaws.s3.controllers.ReplicationController;
import com.amazonaws.s3.controllers.RetentionController;
import com.amazonaws.s3.controllers.TaggingController;
import com.amazonaws.s3.controllers.TorrentController;
import com.amazonaws.s3.controllers.UploadsController;
import com.amazonaws.s3.controllers.VersioningController;
import com.amazonaws.s3.controllers.VersionsController;
import com.amazonaws.s3.controllers.WebsiteController;
import com.amazonaws.s3.http.client.HttpCallback;
import com.amazonaws.s3.http.client.HttpClientConfiguration;
import com.amazonaws.s3.http.client.ReadonlyHttpClientConfiguration;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class AWSS3Client implements Configuration {

    /**
     * Private store for controllers.
     */
    private AccelerateController accelerate;
    private ACLController aCL;
    private AnalyticsController analytics;
    private CORSController cORS;
    private EncryptionController encryption;
    private InventoryController inventory;
    private LifecycleController lifecycle;
    private LocationController location;
    private LoggingController logging;
    private MetricsController metrics;
    private NotificationsController notifications;
    private PaymentsController payments;
    private PolicyController policy;
    private ReplicationController replication;
    private TaggingController tagging;
    private VersioningController versioning;
    private WebsiteController website;
    private BucketsController buckets;
    private LegalHoldController legalHold;
    private LockController lock;
    private RetentionController retention;
    private TorrentController torrent;
    private UploadsController uploads;
    private VersionsController versions;
    private ObjectsController objects;
    private PublicAccessBlockController publicAccessBlock;
    private MiscController misc;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private AWSS3Client(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;
        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        accelerate = new AccelerateController(globalConfig);
        aCL = new ACLController(globalConfig);
        analytics = new AnalyticsController(globalConfig);
        cORS = new CORSController(globalConfig);
        encryption = new EncryptionController(globalConfig);
        inventory = new InventoryController(globalConfig);
        lifecycle = new LifecycleController(globalConfig);
        location = new LocationController(globalConfig);
        logging = new LoggingController(globalConfig);
        metrics = new MetricsController(globalConfig);
        notifications = new NotificationsController(globalConfig);
        payments = new PaymentsController(globalConfig);
        policy = new PolicyController(globalConfig);
        replication = new ReplicationController(globalConfig);
        tagging = new TaggingController(globalConfig);
        versioning = new VersioningController(globalConfig);
        website = new WebsiteController(globalConfig);
        buckets = new BucketsController(globalConfig);
        legalHold = new LegalHoldController(globalConfig);
        lock = new LockController(globalConfig);
        retention = new RetentionController(globalConfig);
        torrent = new TorrentController(globalConfig);
        uploads = new UploadsController(globalConfig);
        versions = new VersionsController(globalConfig);
        objects = new ObjectsController(globalConfig);
        publicAccessBlock = new PublicAccessBlockController(globalConfig);
        misc = new MiscController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of AccelerateController.
     * @return accelerate
     */
    public AccelerateController getAccelerateController() {
        return accelerate;
    }

    /**
     * Get the instance of ACLController.
     * @return aCL
     */
    public ACLController getACLController() {
        return aCL;
    }

    /**
     * Get the instance of AnalyticsController.
     * @return analytics
     */
    public AnalyticsController getAnalyticsController() {
        return analytics;
    }

    /**
     * Get the instance of CORSController.
     * @return cORS
     */
    public CORSController getCORSController() {
        return cORS;
    }

    /**
     * Get the instance of EncryptionController.
     * @return encryption
     */
    public EncryptionController getEncryptionController() {
        return encryption;
    }

    /**
     * Get the instance of InventoryController.
     * @return inventory
     */
    public InventoryController getInventoryController() {
        return inventory;
    }

    /**
     * Get the instance of LifecycleController.
     * @return lifecycle
     */
    public LifecycleController getLifecycleController() {
        return lifecycle;
    }

    /**
     * Get the instance of LocationController.
     * @return location
     */
    public LocationController getLocationController() {
        return location;
    }

    /**
     * Get the instance of LoggingController.
     * @return logging
     */
    public LoggingController getLoggingController() {
        return logging;
    }

    /**
     * Get the instance of MetricsController.
     * @return metrics
     */
    public MetricsController getMetricsController() {
        return metrics;
    }

    /**
     * Get the instance of NotificationsController.
     * @return notifications
     */
    public NotificationsController getNotificationsController() {
        return notifications;
    }

    /**
     * Get the instance of PaymentsController.
     * @return payments
     */
    public PaymentsController getPaymentsController() {
        return payments;
    }

    /**
     * Get the instance of PolicyController.
     * @return policy
     */
    public PolicyController getPolicyController() {
        return policy;
    }

    /**
     * Get the instance of ReplicationController.
     * @return replication
     */
    public ReplicationController getReplicationController() {
        return replication;
    }

    /**
     * Get the instance of TaggingController.
     * @return tagging
     */
    public TaggingController getTaggingController() {
        return tagging;
    }

    /**
     * Get the instance of VersioningController.
     * @return versioning
     */
    public VersioningController getVersioningController() {
        return versioning;
    }

    /**
     * Get the instance of WebsiteController.
     * @return website
     */
    public WebsiteController getWebsiteController() {
        return website;
    }

    /**
     * Get the instance of BucketsController.
     * @return buckets
     */
    public BucketsController getBucketsController() {
        return buckets;
    }

    /**
     * Get the instance of LegalHoldController.
     * @return legalHold
     */
    public LegalHoldController getLegalHoldController() {
        return legalHold;
    }

    /**
     * Get the instance of LockController.
     * @return lock
     */
    public LockController getLockController() {
        return lock;
    }

    /**
     * Get the instance of RetentionController.
     * @return retention
     */
    public RetentionController getRetentionController() {
        return retention;
    }

    /**
     * Get the instance of TorrentController.
     * @return torrent
     */
    public TorrentController getTorrentController() {
        return torrent;
    }

    /**
     * Get the instance of UploadsController.
     * @return uploads
     */
    public UploadsController getUploadsController() {
        return uploads;
    }

    /**
     * Get the instance of VersionsController.
     * @return versions
     */
    public VersionsController getVersionsController() {
        return versions;
    }

    /**
     * Get the instance of ObjectsController.
     * @return objects
     */
    public ObjectsController getObjectsController() {
        return objects;
    }

    /**
     * Get the instance of PublicAccessBlockController.
     * @return publicAccessBlock
     */
    public PublicAccessBlockController getPublicAccessBlockController() {
        return publicAccessBlock;
    }

    /**
     * Get the instance of MiscController.
     * @return misc
     */
    public MiscController getMiscController() {
        return misc;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.SERVER_1);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.SERVER_1)) {
                return "https://s3.amazonaws.com";
            }
        }
        return "https://s3.amazonaws.com";
    }

    /**
     * Converts this AWSS3Client into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AWSS3Client [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + "]";
    }

    /**
     * Builds a new {@link AWSS3Client.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link AWSS3Client.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link AWSS3Client}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new AWSS3Client object using the set fields.
         * @return AWSS3Client
         */
        public AWSS3Client build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new AWSS3Client(environment, httpClient, httpClientConfig, httpCallback);
        }
    }
}