/*
 * AWSS3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.amazonaws.s3.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.amazonaws.s3.AWSS3Client;
import com.amazonaws.s3.exceptions.ApiException;
import com.amazonaws.s3.models.ListAllMyBucketsResult;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class LockControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static AWSS3Client client;
    
    /**
     * Controller instance (for all tests).
     */
    private static LockController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getLockController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Gets the Object Lock configuration for a bucket. The rule specified in the Object Lock
     * configuration will be applied by default to every new object placed in the specified bucket.
     * For more information, see Locking Objects. .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testObjectLockConfiguration() throws Exception {
        // Parameters for the API call
        String objectLock = 
                "";
        String xAmzContentSha256 = 
                "UNSIGNED-PAYLOAD";

        // Set callback and perform API call
        ListAllMyBucketsResult result = null;
        try {
            result = controller.objectLockConfiguration(objectLock, xAmzContentSha256);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.NULL_STRING);
        headers.put("x-amz-id-2", TestHelper.NULL_STRING);
        headers.put("x-amz-request-id", TestHelper.NULL_STRING);
        headers.put("Date", TestHelper.NULL_STRING);
        headers.put("Transfer-Encoding", TestHelper.NULL_STRING);
        headers.put("Server", TestHelper.NULL_STRING);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{\r\n  \"Owner\": {\r\n    \"ID\": \"94aebaef4c4fbbe84a36f076a1adbf6208742d219ac1c"
                + "ecb29939e262efabf56\",\r\n    \"DisplayName\": \"kinlane\"\r\n  },\r\n  \"Bucket"
                + "s\": {\r\n    \"Bucket\": {\r\n      \"Name\": \"working-demo-2\",\r\n      \"Cr"
                + "eationDate\": \"2019-11-17T04:45:13Z\"\r\n    }\r\n  }\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Gets the Object Lock configuration for a bucket. The rule specified in the Object Lock
     * configuration will be applied by default to every new object placed in the specified bucket.
     * For more information, see Locking Objects. .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testObjectLockConfigurationCopy() throws Exception {
        // Parameters for the API call
        String objectLock = 
                "";
        String xAmzContentSha256 = 
                "UNSIGNED-PAYLOAD";

        // Set callback and perform API call
        ListAllMyBucketsResult result = null;
        try {
            result = controller.objectLockConfigurationCopy(objectLock, xAmzContentSha256);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.NULL_STRING);
        headers.put("x-amz-id-2", TestHelper.NULL_STRING);
        headers.put("x-amz-request-id", TestHelper.NULL_STRING);
        headers.put("Date", TestHelper.NULL_STRING);
        headers.put("Transfer-Encoding", TestHelper.NULL_STRING);
        headers.put("Server", TestHelper.NULL_STRING);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{\r\n  \"Owner\": {\r\n    \"ID\": \"94aebaef4c4fbbe84a36f076a1adbf6208742d219ac1c"
                + "ecb29939e262efabf56\",\r\n    \"DisplayName\": \"kinlane\"\r\n  },\r\n  \"Bucket"
                + "s\": {\r\n    \"Bucket\": {\r\n      \"Name\": \"working-demo-2\",\r\n      \"Cr"
                + "eationDate\": \"2019-11-17T04:45:13Z\"\r\n    }\r\n  }\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
